import java.nio.file.Files
import java.util.stream.Collectors

plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'org.sonarqube' version '3.3'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "net.researchgate.release" version "2.8.1"
}

group 'io.github.nstdio'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

def isCI = Boolean.parseBoolean(System.getenv("CI"))
ext {
    junitVersion = '5.8.1'
    commonIoVersion = '1.3.2'
    assertJVersion = '3.21.0'
    jsonPathAssertVersion = '2.6.0'
}

dependencies {
    /** AssertJ & Friends */
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "com.jayway.jsonpath:json-path-assert:$jsonPathAssertVersion"

    testImplementation "org.apache.commons:commons-io:$commonIoVersion"

    /** Jupiter */
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sonarqube {
    properties {
        property "sonar.projectKey", "nstdio_http-client-ext"
        property "sonar.organization", "nstdio"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'JDK Http Client Extensions'
                description = 'The set of usefult extensions for JDK HttpClient.'
                url = 'https://github.com/nstdio/http-client-ext'

                scm {
                    connection = 'scm:git:git@github.com:nstdio/http-client-ext.git'
                    developerConnection = 'scm:git:git@github.com:nstdio/http-client-ext.git'
                    url = 'https://github.com/nstdio/http-client-ext'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'nstdio'
                        name = 'Edgar Asatryan'
                        email = 'nstdio@gmail.com'
                    }
                }

            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def urlBase = "https://s01.oss.sonatype.org"
            nexusUrl = uri("$urlBase/service/local/")
            snapshotRepositoryUrl = uri("$urlBase/content/repositories/snapshots/")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

release {
    tagTemplate = 'v${version}'

    git {
        requireBranch = 'main'
        pushToRemote = 'origin'
    }
}

afterEvaluate {
    afterReleaseBuild.dependsOn publishToSonatype, closeAndReleaseSonatypeStagingRepository
}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = isCI
    }

    dependsOn test
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.register('addLicenseHeaders') {
    doLast {
        String licenseText = Files.lines(file('LICENSE').toPath())
                .map({ ' * ' + it })
                .collect(Collectors.joining('\n', '/*\n', '\n */\n'))

        fileTree(dir: 'src', include: '**/*.java').each {
            String text = it.text
            if (!text.startsWith(licenseText)) {
                it.text = licenseText + text
            }
        }
    }
}

wrapper {
    gradleVersion = '7.2'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
